from sympy import legendre_symbol
from z3 import *

a = Int("a")
b = Int("b")
c = Int("c")
s = Solver()
s.add(a+b+c==15264966144147258587171776703005926730518438603688487721465)
s.add(a*b*c==125440939526343949494022113552414275560444252378483072729156599143746741258532431664938677330319449789665352104352620658550544887807433866999963624320909981994018431526620619)
s.add(a*b+a*c+b*c==76513250180666948190254989703768338299723386154619468700730085586057638716434556720233473454400881002065319569292923)
N = 1
if s.check() == sat:
    ans = s.model()
    print(ans)
    N = ans[a].as_long()*ans[b].as_long()*ans[c].as_long()
    print(N)

from sympy import sqrt_mod
from sympy.ntheory.modular import solve_congruence

# 重新定义素因子
b = 5487564316951417093934647798659941512646442958127439071827
c = 3868765709106144154703556118635822400623994075212553582411
a = 5908636118089697338533572785710162817248001570348495067227

# 重新定义 c_value
c_value = 24884251313604275189259571459005374365204772270250725590014651519125317134307160341658199551661333326703566996431067426138627332156507267671028553934664652787411834581708944

# 计算 c_value 在每个素数模下的平方根
sqrt_a = sqrt_mod(c_value, a, all_roots=True)
sqrt_b = sqrt_mod(c_value, b, all_roots=True)
sqrt_c = sqrt_mod(c_value, c, all_roots=True)

# 使用中国剩余定理合并解
solutions = []
for x in sqrt_a:
    for y in sqrt_b:
        for z in sqrt_c:
            res = solve_congruence((x, a), (y, b), (z, c))
            if res:
                solutions.append(res[0])

print(solutions)
print(bytes.fromhex(hex(325714524936805045870599916394859742487396082609853016904206306797799294429908134765584705104874385528562768869049154397624863645707696788955369048469602267457592373819517)[2:]))
