from Crypto.Util.number import long_to_bytes
from gmpy2 import invert

c = 11017336122691034053241992293963114590816319844384287448629663672049205892828600396465505710922907685545939978376321927394655458727494361852952898280905220963163625482295222856129164172619564344634365520328815972232825639292605311741655988427166811406091329613627961070231457035303298793651546412496975662225857123805867756651901374507447803198638466304862480202099076813471571495380132563252630789218173007275890600746758285415274434393381125742526014986039652677605642226576741424053749512280825231217420239089105794080707322357602941046822659335487420672699022969372037662958497832065752272061853723653365171768556
n = 14091206320622523674847720139761543154822190879035380245424481267482550932229611965964424965958386255076593911062804299275581742665134207390532802109700225140999812698020838683697375891035625255222001884477214361835101442288725383073334392995186053867261497679234362794914108033574681292656522807928680812726462195077833184018122369579002715900477290345396065912536529290811962117814900448319776590712946259540382461632468634827959957286905806432005632864663985014872365672653476822833921870071851313424903481282350342304819149894610089804321405589433980650340610521659031234826823369114800150883988613877877881069579
pxor = 124229245244085791439650934438639686782423445183921252684721764061493908790073948877623812930339081158169421854801552819088679937157357924845248082716160727839419054107753000815066526032809275137495740454967765165248115412626716101315676902716808647904092798908601183908297141420793614426863816161203796966951

p_high = pxor >> (400+352)
p_low = pxor % (2**400)
print(p_high, p_low, pxor.bit_length())

p = 124229245244085791439650934438639686782423445183921252684721764061493908790073948870293397345832864335042475785728973083585314359884258149847711858397514908905613053545356103378803167400248049812953390169260920922532533579636992286759858305144877980057956578200502522929436738617263575249394601586523948318247
q = n // p
phi = (p-1) * (q-1)
d = invert(65537, phi)
m = pow(c, d, p*q)
print(long_to_bytes(m))

# # sage
# n = 14091206320622523674847720139761543154822190879035380245424481267482550932229611965964424965958386255076593911062804299275581742665134207390532802109700225140999812698020838683697375891035625255222001884477214361835101442288725383073334392995186053867261497679234362794914108033574681292656522807928680812726462195077833184018122369579002715900477290345396065912536529290811962117814900448319776590712946259540382461632468634827959957286905806432005632864663985014872365672653476822833921870071851313424903481282350342304819149894610089804321405589433980650340610521659031234826823369114800150883988613877877881069579
# p_high = 5244053423075647293050369760845296155021923134625924343880602074121699910488679402
# p_low = 46291966435171693820219825274244375014507574686529957758905749683380065400998575584457395943124858249361545281828683303
# mod1 = 256 ^ 50
# mod2 = 256 ^ 94
# PR.<x> = PolynomialRing(Zmod(n))
# f = p_high * mod2 + x * mod1 + p_low
# f = f.monic()
# out_p = f.small_roots(2 ^ 352,beta = 0.4,epsilon = 0.03)
#
# p = gcd(int(f(out_p[0])),n)
# print(p)
# https://blog.csdn.net/XiongSiqi_blog/article/details/130113175