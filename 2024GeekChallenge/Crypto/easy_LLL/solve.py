# p = 114770017142688382362918268558878024848633097928402093647914503696492833723966801545716194546592346338592062332306371502256979159033965343002132956304625610134374822329402499359634555710129039614275145668904822690744696925414716152630310915301980153974374009140517084226870950134327432658087834138202887501571
# b = 177876163920838720585474640511391249051418827853372387342635245341495792468826199544624082182728094652999191797576747605771062756630817438777653951772485569478516324903956113309190795622258346824643390004835397272889256696087356239515881459115499360779486974615331766141255410923960657795391638070660994726539
# a = 25269157674120082500323585451842928560404625967932662908517922704871828513397233858615005968124017428639853960550468542894270451871612496631645175015826203493265945456529848647562285359912541672751550625137876486033809099678631009005979648033707322772087110235116987698692692467320479776960630479772236446980
# M = Matrix(ZZ, [[p, 0, 0], [-b, 1, 0], [a, 0, 2 ** 400]])  # Matrix()函数通常采用数值作为参数并返回一个矩阵对象
# c, m, k = M.LLL()[0]
# print(m)
'''LLL 算法是一种格约化算法，用于查找格的约简基。
LLL 方法返回一个由两个元素组成的元组：
简化基和将原始基转换为简化基的矩阵'''

from Crypto.Util.number import *
m = 37699681559436018350327914966284743321192587012153263983384281146421292382333
flag = long_to_bytes(int(m))
print(flag)