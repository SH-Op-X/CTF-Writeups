# p = 131724494512065658801039766546788821718063963144467818735768040631367069153816254855229655449559099188694403260044990366292026916085340250077198735215774149087025577263769846650728593180101073940507285459917860726551385227481715873503612683249433020201729190862430476054822102865441136763977415824331858801617
# b = 169790849804323540946197204708402762862586197604183102589270741859708550301920348112941305999764092197996929298474590062625556806793613268527763774013772685954699561684244945434843656515307801882995934869499880288594142919381501796488815033294127591623260894764750214588993456840404443515671353802614450411717
# a = 87985708831523238980948938165414984318379459926002798504435964538203443877988599888615810231215118828138306895572062833107988965151522391460216837691927960249874511818878134399363147008042562222910234739940697553852540265617603482995091203105040187460485673579382171260197291783748886765929376179151804062085
# M = Matrix(ZZ, [[p, 0, 0], [-b, 1, 0], [a, 0, 2 ** 400]])  # Matrix()函数通常采用数值作为参数并返回一个矩阵对象
# c, m, k = M.LLL()[0]
# print(m)
'''LLL 算法是一种格约化算法，用于查找格的约简基。
LLL 方法返回一个由两个元素组成的元组：
简化基和将原始基转换为简化基的矩阵'''

from Crypto.Util.number import *
m = 178031712611238596731249743701069017647681195469247290391686157388613750102558209749690172438492797
flag = long_to_bytes(int(m))
print(flag)