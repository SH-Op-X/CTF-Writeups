n = 98776098002891477120992675696155328927086322526307976337988006606436135336004472363084175941067711391936982491358233723506086793155908108571814951698009309071244571404116817767749308434991695075517682979438837852005396491907180020541510210086588426719828012276157990720969176680296088209573781988504138607511
c = 9379399412697943604731810117788765980709097637865795846842608472521416662350816995261599566999896411508374352899659705171307916591351157861393506101348972544843696221631571188094524310759046142743046919075577350821523746192424192386688583922197969461446371843309934880019670502610876840610213491163201385965
h = 111518648179416351438603824560360041496706848494616308866057817087295675324528913254309319829895222661760009533326673551072163865
# for i in range(10000):
#     if (i*n + h+2023) % 2024 == 0:
#         # print(i)
#         print(((i*n + h+2023) // 2024).bit_length())
m = (0 * n + h+2023) // 2024

# def phase2(high_m, n, c):
#     R.<x> = PolynomialRing(Zmod(n), implementation='NTL')
#     m = high_m + x
#     M = m((m^3 - c).small_roots()[0])
#     print(hex(int(M))[2:])
#
# phase2(m, n, c)
print(bytes.fromhex("5359437b63727970746f5f69735f766572795f696e746572657374696e675f7768795f646f6e745f796f755f6a6f696e5f75737d"))