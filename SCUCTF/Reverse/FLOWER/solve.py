# a = [0xc2, 0x44, 0x28, 0x86, 0x4E, 0x9D, 0xF4, 0xE4, 0x29, 0x9F, 0x3B, 0x25, 0x71, 0xD7, 0xF6, 0xF9, 0x2D, 0xBE, 0xD4, 0x2E, 0xE1, 0xF9, 0x90, 0xF7, 0x33, 0xD3, 0xF9, 0xB0, 0xC6]

# b = [0x44, 0x28, 0x86, 0x4E, 0x9D, 0xF4, 0xE4, 0x29, 0x9F, 0x3B, 0x25, 0x71, 0xD7, 0xF6, 0xF9, 0x2D, 0xBE, 0xD4, 0x2E, 0xE1, 0xF9, 0x90, 0xF7, 0x33, 0xD3, 0xF9, 0xB0, 0xC6]
# for i in range(27, -1, -1):
#     if i:
#         b[i] ^= a[i]
# v11 = 0x9c
# v14 = 0x8B
# v15 = 0
# for i in range(28):
#     v15 += v11
#     v15 &= 0xff
#     v14 ^= v15
#     b[i] ^= v14
# print("".join(map(chr, b)))

data = [0x5b, 0x51, 0x57, 0x2, 0x48, 0x4b, 0x50, 0x46, 0x2, 0x4f, 0x5b, 0x2, 0x4a, 0x4b, 0x46, 0x47, 0x2, 0x48, 0x4e, 0x51, 0x59, 0x47, 0x54, 0x40, 0x40, 0x2, 0x1c, 0x35, 0x25, 0x37, 0x25, 0x36, 0x28, 0x5d, 0x7, 0x55, 0x5f]
flag = ""
for i in range(len(data)):
    flag += chr(data[i]+30)
print(flag)

v = [0x8F3991F4, 0x9AD3E344, 0x25FBE6B3, 0xC284B3CF]

import struct
from ctypes import c_uint32

def tea_decrypt(r, v, key, delta):
    v0, v1 = c_uint32(v[0]), c_uint32(v[1])
    total = c_uint32(0x20230613+delta * r)
    for i in range(r):
        v1.value -= ((v0.value << 4) + key[2]) ^ (v0.value + total.value) ^ ((v0.value >> 5) + key[3])
        v0.value -= ((v1.value << 4) + key[0]) ^ (v1.value + total.value) ^ ((v1.value >> 5) + key[1])
        total.value -= delta
    return v0.value, v1.value

k = [7, 0, 119, 0]
delta = 0x20020608
for i in range(0, len(v), 2):
    v[i:i+2] = tea_decrypt(32, v[i:i+2], k, delta)
str_list = []
for i in range(len(v)):
    str_list.append(struct.pack('<I', v[i]).decode())
print('decrypted: %s' % ''.join(str_list))
