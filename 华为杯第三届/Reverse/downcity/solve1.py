stack = []

def vm_parse(a1):
    a2 = a1 & 0xff
    if a2 in [6, 1, 5]:
        return a2, a1>>8
    else:
        return a2, 0
def vm_push(a2):
    stack.append(a2)

def vm_pop():
    stack.pop()

def vm_add():
    vm_push(stack.pop() + stack.pop())

def vm_and():
    vm_push(stack.pop() | stack.pop())

def vm_lsh(a2):
    vm_push(stack.pop() << a2)

def vm_rsh(a2):
    vm_push(stack.pop() >> a2)

def vm_read(c):
    vm_push(ord(c))

def vm_print():
    print(chr(stack.pop()))

def vm_jmp(a1):
    global ip
    ip = a1[stack.pop()]

def vm_be():
    if stack[-2] == stack[-3]:
        return stack[-1]
    else:
        return -1

def vm_bl(a1):
    global ip
    a1[501] -= 1
    v2 = a1[a1[501] - 1 + 502]
    a1[501] -= 1
    v3 = a1[a1[501] - 2 + 502]
    a1[501] -= 1
    if v3 >= a1[a1[501] - 3 + 502]:
        ip += 1
    else:
        ip = v2


def vm(s):
    what = False
    k = 0
    ip = 0
    a1 = [0x00000000, 0x00000007, 0x00000101, 0x00000003, 0x00004501, 0x00000801, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000201, 0x00000003, 0x00004301, 0x00001301, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000301, 0x00000003, 0x00005601, 0x00001E01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000101, 0x00000003, 0x00004401, 0x00002901, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000201, 0x00000003, 0x00005601, 0x00003401, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000301, 0x00000003, 0x00004901, 0x00003F01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000805, 0x00000101, 0x00000004, 0x007B0101, 0x00004B01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000805, 0x00000201, 0x00000004, 0x00680201, 0x00005701, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000805, 0x00000301, 0x00000004, 0x00310301, 0x00006301, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000805, 0x00000101, 0x00000004, 0x00440101, 0x00006F01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000805, 0x00000101, 0x00000004, 0x00650101, 0x00007B01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000805, 0x00000201, 0x00000004, 0x006E0201, 0x00008701, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000805, 0x00000301, 0x00000004, 0x005F0301, 0x00009301, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000101, 0x00000003, 0x00005701, 0x00009E01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000201, 0x00000003, 0x00006F01, 0x0000A901, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000301, 0x00000003, 0x00006201, 0x0000B401, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000101, 0x00000003, 0x00004A01, 0x0000BF01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000201, 0x00000003, 0x00003501, 0x0000CA01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000301, 0x00000003, 0x00006201, 0x0000D501, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000201, 0x00000003, 0x00005501, 0x0000E001, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000105, 0x0000DE01, 0x0000EA01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000205, 0x0001BC01, 0x0000F401, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000305, 0x00018001, 0x0000FE01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000805, 0x00000101, 0x00000004, 0x005F0101, 0x00010A01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000805, 0x00000201, 0x00000004, 0x00460201, 0x00011601, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000805, 0x00000301, 0x00000004, 0x00750301, 0x00012201, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000105, 0x0000DC01, 0x00012C01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000205, 0x00017C01, 0x00013601, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000305, 0x00010801, 0x00014001, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00000007, 0x00000305, 0x0003E801, 0x00014A01, 0x0000000A, 0x00017001, 0x00000009, 0x00000002, 0x00000002, 0x00000002, 0x00004301, 0x00000008, 0x00006F01, 0x00000008, 0x00006E01, 0x00000008, 0x00006701, 0x00000008, 0x00007201, 0x00000008, 0x00006101, 0x00000008, 0x00007401, 0x00000008, 0x00007501, 0x00000008, 0x00006C01, 0x00000008, 0x00006101, 0x00000008, 0x00007401, 0x00000008, 0x00006901, 0x00000008, 0x00006F01, 0x00000008, 0x00006E01, 0x00000008, 0x00007301, 0x00000008, 0x00002101, 0x00000008, 0x00000A01, 0x00000008, 0x0000000C, 0x00005401, 0x00000008, 0x00007201, 0x00000008, 0x00007901, 0x00000008, 0x00002C01, 0x00000008, 0x00004101, 0x00000008, 0x00006701, 0x00000008, 0x00006101, 0x00000008, 0x00006901, 0x00000008, 0x00006E01, 0x00000008, 0x00002101, 0x00000008, 0x00000A01, 0x00000008, 0x0000000C, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000]
    global stack
    stack = []
    while True:
        v2, v3 = vm_parse(a1[ip + 1])
        if v2 == 1:
            vm_push(v3)
            ip += 1
        elif v2 == 2:
            vm_pop()
            ip += 1
        elif v2 == 3:
            vm_add()
            ip += 1
        elif v2 == 4:
            vm_and()
            ip += 1
        elif v2 == 5:
            vm_lsh(v3)
            ip += 1
        elif v2 == 6:
            vm_rsh(v3)
            ip += 1
        elif v2 == 7:
            if k == len(s):
                what = True
                break
            vm_read(s[k])
            k += 1
            ip += 1
        elif v2 == 8:
            vm_print()
            ip += 1
        elif v2 == 9:
            vm_jmp(a1)
        elif v2 == 10:
            add = vm_be()
            if add != -1:
                ip = add
            else:
                break
        elif v2 == 11:
            vm_bl(a1)
        elif v2 == 12:
            print(s)
            exit(0)
    return what


from string import printable

chars = list(printable)
s = ""
while True:
    for i in chars:
        s += i
        if vm(s):
            break
        else:
            s = s[:-1]
    if i == chars[-1]:
        break
